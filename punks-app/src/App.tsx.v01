// Using useContext and useReducer:
//  1. Set initial state values.
//  2. Create a context, with React.createContext()
//      - to make `state` and `dispatch` available for child components
//  3. Create reducer function.
//  4. Create context provider flow.
//  5. Create components.

import React, { useReducer } from 'react';
import logo from './logo.svg';
import './App.css';
//import { abiFunctionToString } from '@stacks/transactions';
//import Read_Only from './contract_call_read_only';

// set initial state
const punksInitialState = { id: 1, text: 'nothing'};

// create and export a 'context'
export const punksContext = React.createContext(punksInitialState);

function punksReducer ( state, action ) {
  switch action.type {
    default:
      return punksInitialState
  }
}

function App() {
  const [ state, dispatch ] = useReducer(punksReducer, punksInitialState)
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <div>
          <p>dartman</p>          
          <p> { punksInitialState.id} </p>
          <p> { punksInitialState.text} </p>

        </div>
        <p>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;
